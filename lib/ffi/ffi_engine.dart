// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Binding to the C++ engine
class FFIEngine {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FFIEngine(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FFIEngine.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<Square> _kPassMove = _lookup<Square>('kPassMove');

  DartSquare get kPassMove => _kPassMove.value;

  late final ffi.Pointer<Square> _kStartingPositionMove =
      _lookup<Square>('kStartingPositionMove');

  DartSquare get kStartingPositionMove => _kStartingPositionMove.value;

  late final ffi.Pointer<Square> _kSetupBoardMove =
      _lookup<Square>('kSetupBoardMove');

  DartSquare get kSetupBoardMove => _kSetupBoardMove.value;

  late final ffi.Pointer<Square> _kNoMove = _lookup<Square>('kNoMove');

  DartSquare get kNoMove => _kNoMove.value;

  int PassMove() {
    return _PassMove();
  }

  late final _PassMovePtr =
      _lookup<ffi.NativeFunction<Square Function()>>('PassMove');
  late final _PassMove = _PassMovePtr.asFunction<int Function()>();

  int NoMove() {
    return _NoMove();
  }

  late final _NoMovePtr =
      _lookup<ffi.NativeFunction<Square Function()>>('NoMove');
  late final _NoMove = _NoMovePtr.asFunction<int Function()>();

  int SetupBoardMove() {
    return _SetupBoardMove();
  }

  late final _SetupBoardMovePtr =
      _lookup<ffi.NativeFunction<Square Function()>>('SetupBoardMove');
  late final _SetupBoardMove = _SetupBoardMovePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> MainInit(
    ffi.Pointer<ffi.Char> evals_filepath,
    ffi.Pointer<ffi.Char> book_filepath,
    ffi.Pointer<ffi.Char> thor_filepath,
    ffi.Pointer<ffi.Char> xot_small_filepath,
    ffi.Pointer<ffi.Char> xot_large_filepath,
    SetBoard set_board,
    UpdateAnnotations update_annotations,
    UpdateTimers update_timers,
  ) {
    return _MainInit(
      evals_filepath,
      book_filepath,
      thor_filepath,
      xot_small_filepath,
      xot_large_filepath,
      set_board,
      update_annotations,
      update_timers,
    );
  }

  late final _MainInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              SetBoard,
              UpdateAnnotations,
              UpdateTimers)>>('MainInit');
  late final _MainInit = _MainInitPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          SetBoard,
          UpdateAnnotations,
          UpdateTimers)>();

  ffi.Pointer<ThorMetadata> MainGetThorMetadata(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MainGetThorMetadata(
      ptr,
    );
  }

  late final _MainGetThorMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ThorMetadata> Function(
              ffi.Pointer<ffi.Void>)>>('MainGetThorMetadata');
  late final _MainGetThorMetadata = _MainGetThorMetadataPtr.asFunction<
      ffi.Pointer<ThorMetadata> Function(ffi.Pointer<ffi.Void>)>();

  void MainDelete(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MainDelete(
      ptr,
    );
  }

  late final _MainDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MainDelete');
  late final _MainDelete =
      _MainDeletePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void SetEvaluateParams(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<EvaluateParams> params,
  ) {
    return _SetEvaluateParams(
      ptr,
      params,
    );
  }

  late final _SetEvaluateParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<EvaluateParams>)>>('SetEvaluateParams');
  late final _SetEvaluateParams = _SetEvaluateParamsPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<EvaluateParams>)>();

  void NewGame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NewGame(
      ptr,
    );
  }

  late final _NewGamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'NewGame');
  late final _NewGame =
      _NewGamePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  bool PlayMove(
    ffi.Pointer<ffi.Void> ptr,
    int square,
    bool automatic,
  ) {
    return _PlayMove(
      ptr,
      square,
      automatic,
    );
  }

  late final _PlayMovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Bool)>>('PlayMove');
  late final _PlayMove = _PlayMovePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, int, bool)>();

  bool SetSequence(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> sequence,
  ) {
    return _SetSequence(
      ptr,
      sequence,
    );
  }

  late final _SetSequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('SetSequence');
  late final _SetSequence = _SetSequencePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetSequence(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _GetSequence(
      ptr,
    );
  }

  late final _GetSequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('GetSequence');
  late final _GetSequence = _GetSequencePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  bool Undo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Undo(
      ptr,
    );
  }

  late final _UndoPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'Undo');
  late final _Undo =
      _UndoPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool SetCurrentMove(
    ffi.Pointer<ffi.Void> ptr,
    int current_move,
  ) {
    return _SetCurrentMove(
      ptr,
      current_move,
    );
  }

  late final _SetCurrentMovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('SetCurrentMove');
  late final _SetCurrentMove = _SetCurrentMovePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool Redo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Redo(
      ptr,
    );
  }

  late final _RedoPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'Redo');
  late final _Redo =
      _RedoPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool ToLastImportantNode(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ToLastImportantNode(
      ptr,
    );
  }

  late final _ToLastImportantNodePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'ToLastImportantNode');
  late final _ToLastImportantNode = _ToLastImportantNodePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>)>();

  void Evaluate(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Evaluate(
      ptr,
    );
  }

  late final _EvaluatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Evaluate');
  late final _Evaluate =
      _EvaluatePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void Analyze(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Analyze(
      ptr,
    );
  }

  late final _AnalyzePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Analyze');
  late final _Analyze =
      _AnalyzePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ResetAnalyzedGame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ResetAnalyzedGame(
      ptr,
    );
  }

  late final _ResetAnalyzedGamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ResetAnalyzedGame');
  late final _ResetAnalyzedGame =
      _ResetAnalyzedGamePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<Annotations> GetCurrentAnnotations(
    ffi.Pointer<ffi.Void> ptr,
    int current_thread,
  ) {
    return _GetCurrentAnnotations(
      ptr,
      current_thread,
    );
  }

  late final _GetCurrentAnnotationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Annotations> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('GetCurrentAnnotations');
  late final _GetCurrentAnnotations = _GetCurrentAnnotationsPtr.asFunction<
      ffi.Pointer<Annotations> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<Annotations> GetStartAnnotations(
    ffi.Pointer<ffi.Void> ptr,
    int current_thread,
  ) {
    return _GetStartAnnotations(
      ptr,
      current_thread,
    );
  }

  late final _GetStartAnnotationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Annotations> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('GetStartAnnotations');
  late final _GetStartAnnotations = _GetStartAnnotationsPtr.asFunction<
      ffi.Pointer<Annotations> Function(ffi.Pointer<ffi.Void>, int)>();

  void Stop(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Stop(
      ptr,
    );
  }

  late final _StopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Stop');
  late final _Stop =
      _StopPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void RandomXOT(
    ffi.Pointer<ffi.Void> ptr,
    bool large,
  ) {
    return _RandomXOT(
      ptr,
      large,
    );
  }

  late final _RandomXOTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>('RandomXOT');
  late final _RandomXOT =
      _RandomXOTPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, bool)>();

  void SetXOTState(
    ffi.Pointer<ffi.Void> ptr,
    XOTState xot_state,
  ) {
    return _SetXOTState(
      ptr,
      xot_state.value,
    );
  }

  late final _SetXOTStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('SetXOTState');
  late final _SetXOTState =
      _SetXOTStatePtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  XOTState GetXOTState(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return XOTState.fromValue(_GetXOTState(
      ptr,
    ));
  }

  late final _GetXOTStatePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>)>>(
      'GetXOTState');
  late final _GetXOTState =
      _GetXOTStatePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  bool IsXot(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _IsXot(
      ptr,
    );
  }

  late final _IsXotPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'IsXot');
  late final _IsXot =
      _IsXotPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  void SetBlackSquare(
    ffi.Pointer<ffi.Void> ptr,
    int square,
  ) {
    return _SetBlackSquare(
      ptr,
      square,
    );
  }

  late final _SetBlackSquarePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('SetBlackSquare');
  late final _SetBlackSquare = _SetBlackSquarePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void SetWhiteSquare(
    ffi.Pointer<ffi.Void> ptr,
    int square,
  ) {
    return _SetWhiteSquare(
      ptr,
      square,
    );
  }

  late final _SetWhiteSquarePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('SetWhiteSquare');
  late final _SetWhiteSquare = _SetWhiteSquarePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void SetEmptySquare(
    ffi.Pointer<ffi.Void> ptr,
    int square,
  ) {
    return _SetEmptySquare(
      ptr,
      square,
    );
  }

  late final _SetEmptySquarePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('SetEmptySquare');
  late final _SetEmptySquare = _SetEmptySquarePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void InvertTurn(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _InvertTurn(
      ptr,
    );
  }

  late final _InvertTurnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'InvertTurn');
  late final _InvertTurn =
      _InvertTurnPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void SetSenseiAction(
    ffi.Pointer<ffi.Void> ptr,
    SenseiAction action,
  ) {
    return _SetSenseiAction(
      ptr,
      action.value,
    );
  }

  late final _SetSenseiActionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('SetSenseiAction');
  late final _SetSenseiAction = _SetSenseiActionPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  SenseiAction GetSenseiAction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return SenseiAction.fromValue(_GetSenseiAction(
      ptr,
    ));
  }

  late final _GetSenseiActionPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>)>>(
      'GetSenseiAction');
  late final _GetSenseiAction =
      _GetSenseiActionPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();
}

typedef Square = ffi.Uint8;
typedef DartSquare = int;

final class ThorSourceMetadata extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> players;

  @ffi.Int()
  external int num_players;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> tournaments;

  @ffi.Int()
  external int num_tournaments;

  external ffi.Pointer<ffi.Int> selected_blacks;

  external ffi.Pointer<ffi.Int> selected_whites;

  external ffi.Pointer<ffi.Int> selected_tournaments;

  @ffi.Bool()
  external bool active;
}

final class ThorMetadata extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ThorSourceMetadata>> sources;

  @ffi.Int()
  external int num_sources;
}

final class ThorGame extends ffi.Struct {
  external ffi.Pointer<ffi.Char> black;

  external ffi.Pointer<ffi.Char> white;

  external ffi.Pointer<ffi.Char> tournament;

  @ffi.Array.multi([60])
  external ffi.Array<Square> moves;

  @ffi.Int()
  external int moves_played;

  @ffi.Int()
  external int score;

  @ffi.Int()
  external int year;
}

enum XOTState {
  XOT_STATE_AUTOMATIC(0),
  XOT_STATE_ALWAYS(1),
  XOT_STATE_NEVER(2);

  final int value;
  const XOTState(this.value);

  static XOTState fromValue(int value) => switch (value) {
        0 => XOT_STATE_AUTOMATIC,
        1 => XOT_STATE_ALWAYS,
        2 => XOT_STATE_NEVER,
        _ => throw ArgumentError("Unknown value for XOTState: $value"),
      };
}

enum AnnotationsProvenance {
  EVALUATE(0),
  BOOK(1),
  EVALUATE_MIXED(2),
  CHILD_EVALUATE(3),
  CHILD_BOOK(4),
  CHILD_MIXED(5),
  GAME_OVER(6);

  final int value;
  const AnnotationsProvenance(this.value);

  static AnnotationsProvenance fromValue(int value) => switch (value) {
        0 => EVALUATE,
        1 => BOOK,
        2 => EVALUATE_MIXED,
        3 => CHILD_EVALUATE,
        4 => CHILD_BOOK,
        5 => CHILD_MIXED,
        6 => GAME_OVER,
        _ => throw ArgumentError(
            "Unknown value for AnnotationsProvenance: $value"),
      };
}

enum SenseiAction {
  SENSEI_INACTIVE(0),
  SENSEI_EVALUATES(1),
  SENSEI_PLAYS_BLACK(2),
  SENSEI_PLAYS_WHITE(3),
  SENSEI_PLAYS_BOTH(4);

  final int value;
  const SenseiAction(this.value);

  static SenseiAction fromValue(int value) => switch (value) {
        0 => SENSEI_INACTIVE,
        1 => SENSEI_EVALUATES,
        2 => SENSEI_PLAYS_BLACK,
        3 => SENSEI_PLAYS_WHITE,
        4 => SENSEI_PLAYS_BOTH,
        _ => throw ArgumentError("Unknown value for SenseiAction: $value"),
      };
}

typedef Eval = ffi.Int8;
typedef DartEval = int;
typedef NVisited = ffi.Uint64;
typedef DartNVisited = int;

final class Annotations extends ffi.Struct {
  @Square()
  external int move;

  @ffi.Bool()
  external bool black_turn;

  @ffi.Int()
  external int depth;

  @ffi.Int()
  external int depth_no_pass;

  external ffi.Pointer<Annotations> father;

  external ffi.Pointer<Annotations> first_child;

  external ffi.Pointer<Annotations> next_sibling;

  external ffi.Pointer<Annotations> next_state_primary;

  external ffi.Pointer<Annotations> next_state_secondary;

  @ffi.Bool()
  external bool valid;

  @ffi.Double()
  external double eval;

  @ffi.Double()
  external double leaf_eval;

  @ffi.Double()
  external double eval_best_line;

  @ffi.Int()
  external int median_eval;

  @ffi.Int()
  external int median_eval_best_line;

  @ffi.UnsignedInt()
  external int provenanceAsInt;

  AnnotationsProvenance get provenance =>
      AnnotationsProvenance.fromValue(provenanceAsInt);

  @ffi.Bool()
  external bool derived;

  @ffi.Double()
  external double prob_lower_eval;

  @ffi.Double()
  external double prob_upper_eval;

  @ffi.Double()
  external double proof_number_lower;

  @ffi.Double()
  external double disproof_number_upper;

  @Eval()
  external int lower;

  @Eval()
  external int upper;

  @Eval()
  external int weak_lower;

  @Eval()
  external int weak_upper;

  @ffi.Double()
  external double seconds;

  @NVisited()
  external int descendants;

  @NVisited()
  external int descendants_book;

  @ffi.Double()
  external double missing;

  @ffi.UnsignedInt()
  external int num_thor_games;

  external ffi.Pointer<ThorGame> example_thor_games;

  @ffi.UnsignedInt()
  external int num_example_thor_games;

  @ffi.Double()
  external double thor_winning_percentage;

  @ffi.Bool()
  external bool during_analysis;

  @ffi.Bool()
  external bool modified;
}

typedef BitPattern = ffi.Uint64;
typedef DartBitPattern = int;

final class BoardUpdate extends ffi.Struct {
  @BitPattern()
  external int player;

  @BitPattern()
  external int opponent;

  @ffi.Bool()
  external bool black_turn;

  @ffi.Int()
  external int last_move;

  @ffi.Bool()
  external bool is_game_over;

  external ffi.Pointer<Annotations> start_annotations;
}

final class ThorParams extends ffi.Struct {
  @ffi.Int()
  external int max_games;

  @ffi.Int()
  external int start_year;

  @ffi.Int()
  external int end_year;
}

final class EvaluateParams extends ffi.Struct {
  @ffi.Int()
  external int lower;

  @ffi.Int()
  external int upper;

  @NVisited()
  external int max_positions;

  @ffi.Double()
  external double max_time_first_eval;

  @ffi.Double()
  external double max_time_next_evals;

  @ffi.Double()
  external double max_time_analysis;

  @ffi.Double()
  external double max_time_play;

  @ffi.Double()
  external double error_play;

  @ffi.Int()
  external int n_threads;

  @ffi.Double()
  external double delta;

  @ffi.Bool()
  external bool approx;

  @ffi.Bool()
  external bool use_book;

  @ffi.Bool()
  external bool reevaluate_during_analysis;

  external ThorParams thor_filters;

  @ffi.UnsignedInt()
  external int sensei_actionAsInt;

  SenseiAction get sensei_action => SenseiAction.fromValue(sensei_actionAsInt);
}

typedef SetBoardFunction = ffi.Void Function(BoardUpdate);
typedef DartSetBoardFunction = void Function(BoardUpdate);
typedef SetBoard = ffi.Pointer<ffi.NativeFunction<SetBoardFunction>>;
typedef UpdateAnnotationsFunction = ffi.Void Function(
    ffi.Int, ffi.Bool, ffi.Int);
typedef DartUpdateAnnotationsFunction = void Function(int, bool, int);
typedef UpdateAnnotations
    = ffi.Pointer<ffi.NativeFunction<UpdateAnnotationsFunction>>;
typedef UpdateTimersFunction = ffi.Void Function(ffi.Double, ffi.Double);
typedef DartUpdateTimersFunction = void Function(double, double);
typedef UpdateTimers = ffi.Pointer<ffi.NativeFunction<UpdateTimersFunction>>;
