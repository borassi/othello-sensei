// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Binding to the C++ engine
class FFIEngine {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FFIEngine(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FFIEngine.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> MainInit(
    ffi.Pointer<ffi.Char> evals_filepath,
    ffi.Pointer<ffi.Char> book_filepath,
    ffi.Pointer<ffi.Char> thor_filepath,
    SetBoard set_board,
    UpdateAnnotations update_annotations,
  ) {
    return _MainInit(
      evals_filepath,
      book_filepath,
      thor_filepath,
      set_board,
      update_annotations,
    );
  }

  late final _MainInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              SetBoard,
              UpdateAnnotations)>>('MainInit');
  late final _MainInit = _MainInitPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          SetBoard,
          UpdateAnnotations)>();

  ThorMetadata MainGetThorMetadata(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MainGetThorMetadata(
      ptr,
    );
  }

  late final _MainGetThorMetadataPtr =
      _lookup<ffi.NativeFunction<ThorMetadata Function(ffi.Pointer<ffi.Void>)>>(
          'MainGetThorMetadata');
  late final _MainGetThorMetadata = _MainGetThorMetadataPtr.asFunction<
      ThorMetadata Function(ffi.Pointer<ffi.Void>)>();

  void MainDelete(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MainDelete(
      ptr,
    );
  }

  late final _MainDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MainDelete');
  late final _MainDelete =
      _MainDeletePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EvaluateParams> MainGetEvaluateParams(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MainGetEvaluateParams(
      ptr,
    );
  }

  late final _MainGetEvaluateParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EvaluateParams> Function(
              ffi.Pointer<ffi.Void>)>>('MainGetEvaluateParams');
  late final _MainGetEvaluateParams = _MainGetEvaluateParamsPtr.asFunction<
      ffi.Pointer<EvaluateParams> Function(ffi.Pointer<ffi.Void>)>();

  void NewGame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NewGame(
      ptr,
    );
  }

  late final _NewGamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'NewGame');
  late final _NewGame =
      _NewGamePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void PlayMove(
    ffi.Pointer<ffi.Void> ptr,
    int square,
  ) {
    return _PlayMove(
      ptr,
      square,
    );
  }

  late final _PlayMovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('PlayMove');
  late final _PlayMove =
      _PlayMovePtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void Undo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Undo(
      ptr,
    );
  }

  late final _UndoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Undo');
  late final _Undo =
      _UndoPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void Redo(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Redo(
      ptr,
    );
  }

  late final _RedoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Redo');
  late final _Redo =
      _RedoPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void Evaluate(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Evaluate(
      ptr,
    );
  }

  late final _EvaluatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Evaluate');
  late final _Evaluate =
      _EvaluatePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<MoveAnnotations> GetAnnotations(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _GetAnnotations(
      ptr,
    );
  }

  late final _GetAnnotationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MoveAnnotations> Function(
              ffi.Pointer<ffi.Void>)>>('GetAnnotations');
  late final _GetAnnotations = _GetAnnotationsPtr.asFunction<
      ffi.Pointer<MoveAnnotations> Function(ffi.Pointer<ffi.Void>)>();

  void Stop(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _Stop(
      ptr,
    );
  }

  late final _StopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Stop');
  late final _Stop =
      _StopPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

final class ThorSourceMetadata extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> players;

  @ffi.Int()
  external int num_players;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> tournaments;

  @ffi.Int()
  external int num_tournaments;

  external ffi.Pointer<ffi.Int> selected_blacks;

  external ffi.Pointer<ffi.Int> selected_whites;

  external ffi.Pointer<ffi.Int> selected_tournaments;
}

final class ThorMetadata extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ThorSourceMetadata>> sources;

  @ffi.Int()
  external int num_sources;
}

final class BoardUpdate extends ffi.Struct {
  @BitPattern()
  external int player;

  @BitPattern()
  external int opponent;

  @ffi.Bool()
  external bool black_turn;
}

typedef BitPattern = ffi.Uint64;
typedef DartBitPattern = int;

final class MoveAnnotations extends ffi.Struct {
  @Square()
  external int square;

  @ffi.Bool()
  external bool book;

  @ffi.Double()
  external double eval;

  @ffi.Double()
  external double leaf_eval;

  @Eval()
  external int lower;

  @Eval()
  external int upper;

  @Eval()
  external int weak_lower;

  @Eval()
  external int weak_upper;

  @NVisited()
  external int descendants;

  @NVisited()
  external int missing;

  @ffi.UnsignedInt()
  external int num_thor_games;

  @ffi.Double()
  external double thor_winning_percentage;
}

typedef Square = ffi.Uint8;
typedef DartSquare = int;
typedef Eval = ffi.Int8;
typedef DartEval = int;
typedef NVisited = ffi.Uint64;
typedef DartNVisited = int;

final class ThorGame extends ffi.Struct {
  external ffi.Pointer<ffi.Char> black;

  external ffi.Pointer<ffi.Char> white;

  external ffi.Pointer<ffi.Char> tournament;

  @ffi.Array.multi([60])
  external ffi.Array<Square> moves;

  @ffi.Int()
  external int moves_played;

  @ffi.Int()
  external int score;

  @ffi.Int()
  external int year;
}

final class Annotations extends ffi.Struct {
  @NVisited()
  external int positions;

  @NVisited()
  external int positions_calculated;

  @ffi.Double()
  external double seconds;

  @NVisited()
  external int missing;

  @ffi.Array.multi([64])
  external ffi.Array<MoveAnnotations> moves;

  @ffi.Int()
  external int num_moves;

  @ffi.Bool()
  external bool finished;

  @ffi.UnsignedInt()
  external int num_thor_games;

  external ffi.Pointer<ThorGame> example_thor_games;

  @ffi.UnsignedInt()
  external int num_example_thor_games;
}

final class ThorParams extends ffi.Struct {
  @ffi.Bool()
  external bool use_thor;

  @ffi.Int()
  external int max_games;

  @ffi.Int()
  external int start_year;

  @ffi.Int()
  external int end_year;
}

final class EvaluateParams extends ffi.Struct {
  @ffi.Int()
  external int lower;

  @ffi.Int()
  external int upper;

  @NVisited()
  external int max_positions;

  @ffi.Double()
  external double max_time;

  @ffi.Int()
  external int n_threads;

  @ffi.Double()
  external double delta;

  @ffi.Bool()
  external bool approx;

  @ffi.Bool()
  external bool use_book;

  external ThorParams thor_filters;
}

typedef SetBoard = ffi.Pointer<ffi.NativeFunction<SetBoardFunction>>;
typedef SetBoardFunction = ffi.Void Function(BoardUpdate);
typedef DartSetBoardFunction = void Function(BoardUpdate);
typedef UpdateAnnotations
    = ffi.Pointer<ffi.NativeFunction<UpdateAnnotationsFunction>>;
typedef UpdateAnnotationsFunction = ffi.Void Function(Annotations);
typedef DartUpdateAnnotationsFunction = void Function(Annotations);
